'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _d3StateVisualizer = require('d3-state-visualizer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var wrapperStyle = {
  width: '100%',
  height: '100%'
};

var Chart = function (_Component) {
  _inherits(Chart, _Component);

  function Chart() {
    _classCallCheck(this, Chart);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Chart.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props;
    var select = _props.select;
    var state = _props.state;
    var defaultIsVisible = _props.defaultIsVisible;

    this.renderChart = (0, _d3StateVisualizer.tree)((0, _reactDom.findDOMNode)(this), this.props);
    if (defaultIsVisible) {
      this.renderChart(select(state));
    }
  };

  Chart.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var state = nextProps.state;
    var select = nextProps.select;
    var monitorState = nextProps.monitorState;

    if (monitorState.isVisible !== false) {
      this.renderChart(select(state));
    }
  };

  Chart.prototype.render = function render() {
    return _react2.default.createElement('div', { style: wrapperStyle });
  };

  return Chart;
}(_react.Component);

Chart.propTypes = {
  state: _react.PropTypes.object,
  rootKeyName: _react.PropTypes.string,
  pushMethod: _react.PropTypes.oneOf(['push', 'unshift']),
  tree: _react.PropTypes.shape({
    name: _react.PropTypes.string,
    children: _react.PropTypes.array
  }),
  id: _react.PropTypes.string,
  style: _react.PropTypes.shape({
    node: _react.PropTypes.shape({
      colors: _react.PropTypes.shape({
        'default': _react.PropTypes.string,
        parent: _react.PropTypes.string,
        collapsed: _react.PropTypes.string
      }),
      radius: _react.PropTypes.number
    }),
    text: _react.PropTypes.shape({
      colors: _react.PropTypes.shape({
        'default': _react.PropTypes.string,
        hover: _react.PropTypes.string
      })
    }),
    link: _react.PropTypes.object
  }),
  size: _react.PropTypes.number,
  aspectRatio: _react.PropTypes.number,
  margin: _react.PropTypes.shape({
    top: _react.PropTypes.number,
    right: _react.PropTypes.number,
    bottom: _react.PropTypes.number,
    left: _react.PropTypes.number
  }),
  isSorted: _react.PropTypes.bool,
  heightBetweenNodesCoeff: _react.PropTypes.number,
  widthBetweenNodesCoeff: _react.PropTypes.number,
  transitionDuration: _react.PropTypes.number,
  onClickText: _react.PropTypes.func,
  tooltipOptions: _react.PropTypes.shape({
    disabled: _react.PropTypes.bool,
    left: _react.PropTypes.number,
    top: _react.PropTypes.number,
    offset: _react.PropTypes.shape({
      left: _react.PropTypes.number,
      top: _react.PropTypes.number
    }),
    indentationSize: _react.PropTypes.number,
    style: _react.PropTypes.object
  })
};
exports.default = Chart;