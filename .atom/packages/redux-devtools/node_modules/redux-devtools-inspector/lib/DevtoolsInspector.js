'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createStylingFromTheme = require('./utils/createStylingFromTheme');

var _function = require('react-pure-render/function');

var _function2 = _interopRequireDefault(_function);

var _ActionList = require('./ActionList');

var _ActionList2 = _interopRequireDefault(_ActionList);

var _ActionPreview = require('./ActionPreview');

var _ActionPreview2 = _interopRequireDefault(_ActionPreview);

var _getInspectedState = require('./utils/getInspectedState');

var _getInspectedState2 = _interopRequireDefault(_getInspectedState);

var _DiffPatcher = require('./DiffPatcher');

var _DiffPatcher2 = _interopRequireDefault(_DiffPatcher);

var _reactBase16Styling = require('react-base16-styling');

var _redux = require('./redux');

var _reduxDevtools = require('redux-devtools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var commit = _reduxDevtools.ActionCreators.commit;
var sweep = _reduxDevtools.ActionCreators.sweep;
var toggleAction = _reduxDevtools.ActionCreators.toggleAction;


function getLastActionId(props) {
  return props.stagedActionIds[props.stagedActionIds.length - 1];
}

function getCurrentActionId(props, monitorState) {
  var lastActionId = getLastActionId(props);
  return monitorState.selectedActionId === null ? lastActionId : monitorState.selectedActionId;
}

function getFromState(actionIndex, stagedActionIds, computedStates, monitorState) {
  var startActionId = monitorState.startActionId;

  if (startActionId === null) {
    return actionIndex > 0 ? computedStates[actionIndex - 1] : null;
  }
  var fromStateIdx = stagedActionIds.indexOf(startActionId - 1);
  if (fromStateIdx === -1) fromStateIdx = 0;
  return computedStates[fromStateIdx];
}

function createMonitorState(props, monitorState) {
  var supportImmutable = props.supportImmutable;
  var computedStates = props.computedStates;
  var stagedActionIds = props.stagedActionIds;
  var actions = props.actionsById;
  var inspectedStatePath = monitorState.inspectedStatePath;
  var inspectedActionPath = monitorState.inspectedActionPath;

  var currentActionId = getCurrentActionId(props, monitorState);
  var currentAction = actions[currentActionId] && actions[currentActionId].action;

  var actionIndex = stagedActionIds.indexOf(currentActionId);
  var fromState = getFromState(actionIndex, stagedActionIds, computedStates, monitorState);
  var toState = computedStates[actionIndex];
  var error = toState && toState.error;

  var fromInspectedState = !error && fromState && (0, _getInspectedState2.default)(fromState.state, inspectedStatePath, supportImmutable);
  var toInspectedState = !error && toState && (0, _getInspectedState2.default)(toState.state, inspectedStatePath, supportImmutable);
  var delta = !error && fromState && toState && _DiffPatcher2.default.diff(fromInspectedState, toInspectedState);

  return (0, _extends3.default)({}, monitorState, {
    delta: delta,
    currentActionId: currentActionId,
    nextState: toState && (0, _getInspectedState2.default)(toState.state, inspectedStatePath, false),
    action: (0, _getInspectedState2.default)(currentAction, inspectedActionPath, false),
    error: error
  });
}

function createThemeState(props) {
  var base16Theme = (0, _reactBase16Styling.getBase16Theme)(props.theme, _createStylingFromTheme.base16Themes);
  var styling = (0, _createStylingFromTheme.createStylingFromTheme)(props.theme, props.invertTheme);

  return { base16Theme: base16Theme, styling: styling };
}

var DEFAULT_MONITOR_STATE = {
  isWideLayout: false,
  tabName: 'Diff',
  inspectedStatePath: [],
  inspectedActionPath: [],
  startActionId: null,
  selectedActionId: null
};

var DevtoolsInspector = function (_Component) {
  (0, _inherits3.default)(DevtoolsInspector, _Component);

  function DevtoolsInspector(props) {
    (0, _classCallCheck3.default)(this, DevtoolsInspector);

    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(DevtoolsInspector).call(this, props));

    _this.shouldComponentUpdate = _function2.default;

    _this.handleToggleAction = function (actionId) {
      _this.props.dispatch(toggleAction(actionId));
    };

    _this.handleCommit = function () {
      _this.props.dispatch(commit());
    };

    _this.handleSweep = function () {
      _this.props.dispatch(sweep());
    };

    _this.handleSearch = function (val) {
      _this.updateMonitorState({ searchValue: val });
    };

    _this.handleSelectAction = function (e, actionId) {
      var monitorState = _this.state.monitorState;

      var startActionId = void 0;
      var selectedActionId = void 0;

      if (e.shiftKey && monitorState.selectedActionId !== null) {
        if (monitorState.startActionId !== null) {
          if (actionId >= monitorState.startActionId) {
            startActionId = Math.min(monitorState.startActionId, monitorState.selectedActionId);
            selectedActionId = actionId;
          } else {
            selectedActionId = Math.max(monitorState.startActionId, monitorState.selectedActionId);
            startActionId = actionId;
          }
        } else {
          startActionId = Math.min(actionId, monitorState.selectedActionId);
          selectedActionId = Math.max(actionId, monitorState.selectedActionId);
        }
      } else {
        startActionId = null;
        if (actionId === monitorState.selectedActionId || monitorState.startActionId !== null) {
          selectedActionId = null;
        } else {
          selectedActionId = actionId;
        }
      }

      _this.updateMonitorState({ startActionId: startActionId, selectedActionId: selectedActionId });
    };

    _this.handleInspectPath = function (pathType, path) {
      _this.updateMonitorState((0, _defineProperty3.default)({}, pathType, path));
    };

    _this.handleSelectTab = function (tabName) {
      _this.updateMonitorState({ tabName: tabName });
    };

    _this.state = {
      themeState: createThemeState(props),
      monitorState: createMonitorState(props, DEFAULT_MONITOR_STATE)
    };
    return _this;
  }

  (0, _createClass3.default)(DevtoolsInspector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateSizeMode();
      this.updateSizeTimeout = window.setInterval(this.updateSizeMode.bind(this), 150);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.clearTimeout(this.updateSizeTimeout);
    }
  }, {
    key: 'updateMonitorState',
    value: function updateMonitorState(monitorState) {
      var _this2 = this;

      this.setState({ monitorState: (0, _extends3.default)({}, this.state.monitorState, monitorState) }, function () {
        if (_this2.props.shouldPersistState) {
          _this2.props.dispatch((0, _redux.updateMonitorState)(monitorState));
        }
      });
    }
  }, {
    key: 'updateSizeMode',
    value: function updateSizeMode() {
      var isWideLayout = this.refs.inspector.offsetWidth > 500;
      var monitorState = this.state.monitorState;


      if (isWideLayout !== monitorState.isWideLayout) {
        this.updateMonitorState({ isWideLayout: isWideLayout });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextMonitorState = nextProps.monitorState;
      var monitorState = this.props.monitorState;

      if (monitorState !== nextMonitorState) {
        this.setState({ monitorState: (0, _extends3.default)({}, this.state.monitorState, nextMonitorState) });
      }
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      var nextMonitorState = nextState.monitorState;
      var monitorState = this.state.monitorState;

      if (getCurrentActionId(this.props, monitorState) !== getCurrentActionId(nextProps, nextMonitorState) || monitorState.startActionId !== nextMonitorState.startActionId || monitorState.inspectedStatePath !== nextMonitorState.inspectedStatePath || monitorState.inspectedActionPath !== nextMonitorState.inspectedActionPath) {

        nextMonitorState = createMonitorState(nextProps, nextMonitorState);

        this.updateMonitorState(nextMonitorState);
      }

      if (this.props.theme !== nextProps.theme || this.props.invertTheme !== nextProps.invertTheme) {
        this.setState({ themeState: createThemeState(nextProps) });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var actionIds = _props.stagedActionIds;
      var actions = _props.actionsById;
      var computedStates = _props.computedStates;
      var tabs = _props.tabs;
      var invertTheme = _props.invertTheme;
      var skippedActionIds = _props.skippedActionIds;
      var monitorState = this.state.monitorState;
      var isWideLayout = monitorState.isWideLayout;
      var selectedActionId = monitorState.selectedActionId;
      var startActionId = monitorState.startActionId;
      var nextState = monitorState.nextState;
      var action = monitorState.action;
      var searchValue = monitorState.searchValue;
      var tabName = monitorState.tabName;
      var delta = monitorState.delta;
      var error = monitorState.error;

      var inspectedPathType = tabName === 'Action' ? 'inspectedActionPath' : 'inspectedStatePath';
      var _state$themeState = this.state.themeState;
      var base16Theme = _state$themeState.base16Theme;
      var styling = _state$themeState.styling;


      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({ key: 'inspector',
          ref: 'inspector'
        }, styling(['inspector', isWideLayout && 'inspectorWide'], isWideLayout)),
        _react2.default.createElement(_ActionList2.default, (0, _extends3.default)({
          actions: actions, actionIds: actionIds, isWideLayout: isWideLayout, searchValue: searchValue, selectedActionId: selectedActionId, startActionId: startActionId
        }, {
          styling: styling,
          onSearch: this.handleSearch,
          onSelect: this.handleSelectAction,
          onToggleAction: this.handleToggleAction,
          onCommit: this.handleCommit,
          onSweep: this.handleSweep,
          skippedActionIds: skippedActionIds,
          lastActionId: getLastActionId(this.props) })),
        _react2.default.createElement(_ActionPreview2.default, (0, _extends3.default)({
          base16Theme: base16Theme, invertTheme: invertTheme, tabs: tabs, tabName: tabName, delta: delta, error: error, nextState: nextState,
          computedStates: computedStates, action: action, actions: actions, selectedActionId: selectedActionId, startActionId: startActionId
        }, {
          styling: styling,
          onInspectPath: this.handleInspectPath.bind(this, inspectedPathType),
          inspectedPath: monitorState[inspectedPathType],
          onSelectTab: this.handleSelectTab }))
      );
    }
  }]);
  return DevtoolsInspector;
}(_react.Component);

DevtoolsInspector.propTypes = {
  dispatch: _react.PropTypes.func,
  computedStates: _react.PropTypes.array,
  stagedActionIds: _react.PropTypes.array,
  actionsById: _react.PropTypes.object,
  currentStateIndex: _react.PropTypes.number,
  monitorState: _react.PropTypes.shape({
    initialScrollTop: _react.PropTypes.number
  }),
  preserveScrollTop: _react.PropTypes.bool,
  stagedActions: _react.PropTypes.array,
  select: _react.PropTypes.func.isRequired,
  theme: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]),
  supportImmutable: _react.PropTypes.bool
};
DevtoolsInspector.update = _redux.reducer;
DevtoolsInspector.defaultProps = {
  select: function select(state) {
    return state;
  },
  supportImmutable: false,
  theme: 'inspector',
  invertTheme: true,
  shouldPersistState: true
};
exports.default = DevtoolsInspector;