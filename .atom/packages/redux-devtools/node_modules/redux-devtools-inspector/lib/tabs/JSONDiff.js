'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJsonTree = require('react-json-tree');

var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

var _javascriptStringify = require('javascript-stringify');

var _javascriptStringify2 = _interopRequireDefault(_javascriptStringify);

var _getItemString2 = require('./getItemString');

var _getItemString3 = _interopRequireDefault(_getItemString2);

var _getJsonTreeTheme = require('./getJsonTreeTheme');

var _getJsonTreeTheme2 = _interopRequireDefault(_getJsonTreeTheme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringifyAndShrink(val) {
  var str = (0, _javascriptStringify2.default)(val);
  if (val === null) {
    return 'null';
  } else if (typeof val === 'undefined') {
    return 'undefined';
  }

  return str.length > 22 ? str.substr(0, 15) + 'â€¦' + str.substr(-5) : str;
}

var expandFirstLevel = function expandFirstLevel(keyName, data, level) {
  return level <= 1;
};

function prepareDelta(value) {
  if (value && value._t === 'a') {
    var res = {};
    for (var key in value) {
      if (key !== '_t') {
        if (key[0] === '_' && !value[key.substr(1)]) {
          res[key.substr(1)] = value[key];
        } else if (value['_' + key]) {
          res[key] = [value['_' + key][0], value[key][0]];
        } else if (!value['_' + key] && key[0] !== '_') {
          res[key] = value[key];
        }
      }
    }
    return res;
  }

  return value;
}

var JSONDiff = function (_Component) {
  (0, _inherits3.default)(JSONDiff, _Component);

  function JSONDiff() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, JSONDiff);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_Object$getPrototypeO = (0, _getPrototypeOf2.default)(JSONDiff)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = { data: {} }, _this.valueRenderer = function (raw, value) {
      var styling = _this.props.styling;


      function renderSpan(name, body) {
        return _react2.default.createElement(
          'span',
          (0, _extends3.default)({ key: name }, styling(['diff', name])),
          body
        );
      }

      if (Array.isArray(value)) {
        switch (value.length) {
          case 1:
            return _react2.default.createElement(
              'span',
              styling('diffWrap'),
              renderSpan('diffAdd', stringifyAndShrink(value[0]))
            );
          case 2:
            return _react2.default.createElement(
              'span',
              styling('diffWrap'),
              renderSpan('diffUpdateFrom', stringifyAndShrink(value[0])),
              renderSpan('diffUpdateArrow', ' => '),
              renderSpan('diffUpdateTo', stringifyAndShrink(value[1]))
            );
          case 3:
            return _react2.default.createElement(
              'span',
              styling('diffWrap'),
              renderSpan('diffRemove', stringifyAndShrink(value[0]))
            );
        }
      }

      return raw;
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(JSONDiff, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateData();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.delta !== this.props.delta) {
        this.updateData();
      }
    }
  }, {
    key: 'updateData',
    value: function updateData() {
      // this magically fixes weird React error, where it can't find a node in tree
      // if we set `delta` as JSONTree data right away
      // https://github.com/alexkuz/redux-devtools-inspector/issues/17

      this.setState({ data: this.props.delta });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var styling = _props.styling;
      var base16Theme = _props.base16Theme;
      var props = (0, _objectWithoutProperties3.default)(_props, ['styling', 'base16Theme']);


      if (!this.state.data) {
        return _react2.default.createElement(
          'div',
          styling('stateDiffEmpty'),
          '(states are equal)'
        );
      }

      return _react2.default.createElement(_reactJsonTree2.default, (0, _extends3.default)({}, props, {
        theme: (0, _getJsonTreeTheme2.default)(base16Theme),
        data: this.state.data,
        getItemString: function getItemString(type, data) {
          return (0, _getItemString3.default)(styling, type, data, true);
        },
        valueRenderer: this.valueRenderer,
        postprocessValue: prepareDelta,
        isCustomNode: Array.isArray,
        shouldExpandNode: expandFirstLevel,
        hideRoot: true }));
    }
  }]);
  return JSONDiff;
}(_react.Component);

exports.default = JSONDiff;