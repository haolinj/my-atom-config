'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.__esModule = true;
exports.default = tooltip;

var _ramda = require('ramda');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ref = _utils2.default.default || _utils2.default;

var prependClass = _ref.prependClass;
var functor = _ref.functor;

var defaultOptions = {
  left: undefined, // mouseX
  top: undefined, // mouseY
  offset: { left: 0, top: 0 },
  root: undefined
};

function tooltip(d3) {
  var className = arguments.length <= 1 || arguments[1] === undefined ? 'tooltip' : arguments[1];
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _defaultOptions$optio = _extends({}, defaultOptions, options);

  var left = _defaultOptions$optio.left;
  var top = _defaultOptions$optio.top;
  var offset = _defaultOptions$optio.offset;
  var root = _defaultOptions$optio.root;

  var attrs = { 'class': className };
  var text = function text() {
    return '';
  };
  var styles = {};

  var el = undefined;
  var anchor = root || d3.select('body');
  var rootNode = anchor.node();

  function tip(selection) {
    selection.on({
      'mouseover.tip': function mouseoverTip(node) {
        var _d3$mouse = d3.mouse(rootNode);

        var mouseX = _d3$mouse[0];
        var mouseY = _d3$mouse[1];
        var x = left || mouseX + offset.left;
        var y = top || mouseY - offset.top;

        anchor.selectAll('div.' + className).remove();

        el = anchor.append('div').attr(prependClass(className)(attrs)).style(_extends({
          position: 'absolute',
          'z-index': 1001,
          left: x + 'px',
          top: y + 'px'
        }, styles)).html(function () {
          return text(node);
        });
      },

      'mousemove.tip': function mousemoveTip(node) {
        var _d3$mouse2 = d3.mouse(rootNode);

        var mouseX = _d3$mouse2[0];
        var mouseY = _d3$mouse2[1];
        var x = left || mouseX + offset.left;
        var y = top || mouseY - offset.top;

        el.style({
          left: x + 'px',
          top: y + 'px'
        }).html(function () {
          return text(node);
        });
      },

      'mouseout.tip': function mouseoutTip() {
        return el.remove();
      }
    });
  }

  tip.attr = function setAttr(d) {
    if ((0, _ramda.is)(Object, d)) {
      attrs = _extends({}, attrs, d);
    }
    return this;
  };

  tip.style = function setStyle(d) {
    if ((0, _ramda.is)(Object, d)) {
      styles = _extends({}, styles, d);
    }
    return this;
  };

  tip.text = function setText(d) {
    text = functor(d);
    return this;
  };

  return tip;
}