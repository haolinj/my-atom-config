'use strict';

exports.__esModule = true;
exports.default = map2tree;

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function visit(parent, visitFn, childrenFn) {
  if (!parent) return;

  visitFn(parent);

  var children = childrenFn(parent);
  if (children) {
    var count = children.length;
    for (var i = 0; i < count; i++) {
      visit(children[i], visitFn, childrenFn);
    }
  }
}

function getNode(tree, key) {
  var node = null;

  visit(tree, function (d) {
    if (d.name === key) {
      node = d;
    }
  }, function (d) {
    return d.children;
  });

  return node;
}

function map2tree(root) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var tree = arguments.length <= 2 || arguments[2] === undefined ? { name: options.key || 'state', children: [] } : arguments[2];

  if (!(0, _isPlainObject2.default)(root) && root && !root.toJS) {
    return {};
  }

  var _options$key = options.key;
  var rootNodeKey = _options$key === undefined ? 'state' : _options$key;
  var _options$pushMethod = options.pushMethod;
  var pushMethod = _options$pushMethod === undefined ? 'push' : _options$pushMethod;

  var currentNode = getNode(tree, rootNodeKey);

  if (currentNode === null) {
    return {};
  }

  (0, _mapValues2.default)(root && root.toJS ? root.toJS() : root, function (maybeImmutable, key) {
    var value = maybeImmutable && maybeImmutable.toJS ? maybeImmutable.toJS() : maybeImmutable;
    var newNode = { name: key };

    if ((0, _isArray2.default)(value)) {
      newNode.children = [];

      for (var i = 0; i < value.length; i++) {
        var _newNode$children$pus;

        newNode.children[pushMethod]((_newNode$children$pus = {
          name: key + '[' + i + ']'
        }, _newNode$children$pus[(0, _isPlainObject2.default)(value[i]) ? 'object' : 'value'] = value[i], _newNode$children$pus));
      }
    } else if ((0, _isPlainObject2.default)(value)) {
      newNode.children = [];
    } else {
      newNode.value = value;
    }

    currentNode.children[pushMethod](newNode);

    map2tree(value, { key: key, pushMethod: pushMethod }, tree);
  });

  return tree;
}